generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id         Int      @id @default(autoincrement())
  username   String   @unique @db.VarChar(255)
  uuid       String   @unique @default(uuid()) @db.VarChar(255)
  created_at DateTime @default(now())
  password   String
}

model Events {
  id         Int      @id @default(autoincrement())
  title      String   @unique @db.VarChar(255)
  type       String   @db.VarChar(255)
  startAt    DateTime
  endAt      DateTime
  created_at DateTime @default(now())
  Games      Games[]
}

model Games {
  id                Int                @id @default(autoincrement())
  title             String             @db.VarChar(255)
  eventId           Int
  teacherUid        String?            @db.VarChar(100)
  isResultGen       Boolean
  created_at        DateTime?          @default(now()) @db.DateTime(0)
  event             Events             @relation(fields: [eventId], references: [id], onDelete: Cascade)
  Teachers          Teachers?          @relation(fields: [teacherUid], references: [uuid], onDelete: Cascade, map: "Games_ibfk_1")
  GameRequests      GameRequests[]
  GameStudents      GameStudents[]
  Game_Join_Request Game_Join_Request?

  @@index([eventId], map: "Games_eventId_fkey")
  @@index([teacherUid], map: "Games_ibfk_1")
}

model GameStudents {
  gameId     Int
  studentId  Int
  round      Int
  winRank    Int
  attendence Int?     @default(0)
  game       Games    @relation(fields: [gameId], references: [id], onDelete: Cascade, map: "GameStudents_ibfk_1")
  Results    Results  @relation(fields: [gameId], references: [gameId], onDelete: NoAction, onUpdate: NoAction, map: "fk_GameStudents_2")
  Students   Students @relation(fields: [studentId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_GameStudents_1")

  @@id([gameId, studentId, round])
  @@index([gameId], map: "gameId")
  @@index([studentId], map: "fk_GameStudents_1_idx")
}

model Results {
  gameId       Int
  eventId      Int
  ResultState  Int?           @default(0)
  GameStudents GameStudents[]

  @@id([gameId, eventId])
}

model Students {
  id           Int            @id
  name         String?        @db.VarChar(100)
  gender       String?        @db.VarChar(100)
  dept         String?        @db.VarChar(100)
  email        String?        @db.VarChar(100)
  age          Int?
  password     String         @default("#123") @db.VarChar(100)
  GameRequests GameRequests[]
  GameStudents GameStudents[]
}

model TeacherNotifications {
  id         Int      @id @default(autoincrement())
  text       String
  created_at DateTime @default(now())
  seen       Boolean?
  teacherId  String   @db.VarChar(255)
  Teachers   Teachers @relation(fields: [teacherId], references: [uuid], onDelete: Cascade, onUpdate: Restrict, map: "TeacherNotifications_ibfk_1")

  @@index([teacherId], map: "TeacherNotifications_ibfk_1")
}

model Teachers {
  id                   Int                    @default(autoincrement())
  username             String                 @unique @db.VarChar(100)
  uuid                 String                 @unique @default(uuid()) @db.VarChar(50)
  created_at           DateTime               @default(now())
  password             String
  email                String                 @unique
  dept                 String
  name                 String
  Games                Games[]
  TeacherNotifications TeacherNotifications[]

  @@id([id, uuid])
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model GameRequests {
  gameId    Int
  uuid      String   @db.VarChar(50)
  studentId Int
  createdAt String?  @db.VarChar(100)
  state     Int      @default(0)
  Games     Games    @relation(fields: [gameId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_GameRequests_1")
  Students  Students @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_GameRequests_2")

  @@id([gameId, uuid, studentId])
  @@index([studentId], map: "fk_GameRequests_2_idx")
}

model Game_Join_Request {
  gameId     Int       @id
  studentId  Int
  created_at DateTime? @default(now()) @db.Timestamp(0)
  Games      Games     @relation(fields: [gameId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Game_Join_Request_ibfk_1")
}

model AdminNotification {
  id         Int      @id @default(autoincrement())
  text       String
  created_at DateTime @default(now())
  seen       Boolean?
}
