generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id         Int      @id @default(autoincrement())
  username   String   @unique @db.VarChar(255)
  uuid       String   @unique @default(uuid()) @db.VarChar(255)
  created_at DateTime @default(now())
  password   String
}

model AdminNotifications {
  id         Int      @id @default(autoincrement())
  text       String
  created_at DateTime @default(now())
  seen       Boolean?
}

model AssignedPeople {
  id        Int      @id @default(autoincrement())
  eventId   Int
  teacherId Int
  gameId    Int
  studentId Int
  event     Events   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  game      Games    @relation(fields: [gameId], references: [id], onDelete: Cascade)
  student   Students @relation(fields: [studentId], references: [id], onDelete: Cascade)
  teacher   Teachers @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@index([eventId], map: "AssignedPeople_eventId_fkey")
  @@index([gameId], map: "AssignedPeople_gameId_fkey")
  @@index([studentId], map: "AssignedPeople_studentId_fkey")
  @@index([teacherId], map: "AssignedPeople_teacherId_fkey")
}

model Events {
  id             Int              @id @default(autoincrement())
  title          String           @unique @db.VarChar(255)
  type           String           @db.VarChar(255)
  startAt        DateTime
  endAt          DateTime
  created_at     DateTime         @default(now())
  AssignedPeople AssignedPeople[]
  Games          Games[]
}

model Games {
  id             Int              @id @default(autoincrement())
  title          String           @db.VarChar(255)
  eventId        Int
  teacherUid     String?          @db.VarChar(100)
  isResultGen    Boolean
  created_at     DateTime?        @default(now()) @db.DateTime(0)
  event          Events           @relation(fields: [eventId], references: [id], onDelete: Cascade)
  Teachers       Teachers?        @relation(fields: [teacherUid], references: [uuid], onDelete: Cascade, map: "Games_ibfk_1")
  AssignedPeople AssignedPeople[]
  GameStudents   GameStudents[]

  @@index([eventId], map: "Games_eventId_fkey")
  @@index([teacherUid], map: "Games_ibfk_1")
}

model GameStudents {
  gameId     Int
  studentId  Int
  round      Int
  winRank    Int
  attendence Int?     @default(0)
  game       Games    @relation(fields: [gameId], references: [id], onDelete: Cascade, map: "GameStudents_ibfk_1")
  student    Students @relation(fields: [studentId], references: [id], onDelete: Cascade, map: "GameStudents_ibfk_2")

  @@id([gameId, studentId, round])
  @@index([gameId], map: "gameId")
  @@index([studentId], map: "studentId")
}

model Results {
  gameId      Int
  eventId     Int
  ResultState Int? @default(0)

  @@id([gameId, eventId])
}

model Students {
  id             Int              @id
  name           String           @db.VarChar(255)
  gender         String           @db.VarChar(2)
  dept           String           @db.VarChar(100)
  email          String           @unique
  age            Int
  AssignedPeople AssignedPeople[]
  GameStudents   GameStudents[]
}

model TeacherNotifications {
  id         Int      @id @default(autoincrement())
  text       String
  created_at DateTime @default(now())
  seen       Boolean?
  teacherId  Int
  Teachers   Teachers @relation(fields: [teacherId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "TeacherNotifications_ibfk_1")

  @@index([teacherId], map: "teacherId")
}

model Teachers {
  id                   Int                    @id @default(autoincrement())
  username             String                 @unique @db.VarChar(100)
  uuid                 String                 @unique @default(uuid()) @db.VarChar(50)
  created_at           DateTime               @default(now())
  password             String
  email                String                 @unique
  dept                 String
  name                 String
  AssignedPeople       AssignedPeople[]
  Games                Games[]
  TeacherNotifications TeacherNotifications[]
}
